// server.js

const express = require('express');
const path = require('path');
const Groq = require('groq-sdk');
const fs = require('fs/promises');
const swaggerUi = require('swagger-ui-express');
const YAML = require('yamljs');
// Importation du SDK Gemini (pour la g√©n√©ration d'images)
const { GoogleGenAI } = require('@google/genai');

// --- Configuration du Serveur ---
const app = express();
const PORT = 3144;
app.use(express.json());

// --- Configuration Groq et IA ---
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const GROQ_MODEL = "llama-3.1-8b-instant"; 

// Initialisation de Gemini (assurez-vous d'avoir la cl√© API dans l'environnement)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY; 
const genAI = GEMINI_API_KEY ? new GoogleGenAI({ apiKey: GEMINI_API_KEY }) : null;

if (!genAI) {
    console.warn("‚ö†Ô∏è AVERTISSEMENT GEMINI: La variable d'environnement GEMINI_API_KEY n'est pas d√©finie. La g√©n√©ration d'images sera d√©sactiv√©e.");
}


// ------------------------------------------------
// 1. CONFIGURATION SWAGGER UI
// ------------------------------------------------
// ... (Code Swagger inchang√©) ...
const swaggerDocumentPath = path.join(__dirname, 'api-docs', 'swagger.yaml');
let swaggerDocument = {};

try {
    swaggerDocument = YAML.load(swaggerDocumentPath);
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
    console.log("‚úÖ Documentation Swagger disponible sur /api-docs.");
} catch (error) {
    console.error('‚ùå Erreur lors du chargement de la documentation Swagger (v√©rifiez le chemin et la syntaxe YAML):', error.message);
}


// Servir les fichiers statiques (Front-end)
app.use(express.static(path.join(__dirname, 'docs')));


// ------------------------------------------------
// 2. GESTION DES DONN√âES ET REVENDICATIONS
// ------------------------------------------------

let revendicationsData = {};
const DATA_DIR = path.join(__dirname, 'docs', 'data'); 
const CATEGORY_MAP = {
    'demcratie': 'democratie', 
    'internationnal': 'international', 
};
const PRIORITY_ORDER = { '√âlev√©': 3, 'Moyen': 2, 'Faible': 1 };


// NOUVEAU: Fichier de log des analyses g√©n√©r√©es par l'IA
const ANALYSIS_LOG_PATH = path.join(DATA_DIR, 'analysis_log.json');
let analysisLog = [];

/**
 * Charge tous les fichiers JSON du r√©pertoire DATA_DIR (y compris le log d'analyse).
 */
async function loadAllRevendications() {
    try {
        // Charger le log d'analyse
        try {
            const logContent = await fs.readFile(ANALYSIS_LOG_PATH, 'utf-8');
            analysisLog = JSON.parse(logContent);
            console.log(`‚úÖ Log d'analyse charg√© (${analysisLog.length} entr√©es).`);
        } catch (logError) {
            analysisLog = [];
            console.warn("‚ö†Ô∏è analysis_log.json non trouv√© ou vide. Cr√©ation d'un nouveau log.");
        }
        
        // Charger les revendications (Logique inchang√©e)
        const files = await fs.readdir(DATA_DIR);
        revendicationsData = {};
        
        for (const file of files) {
            if (file.endsWith('.json') && file !== 'analysis_log.json') {
                let categoryFileName = path.parse(file).name;
                const categoryKey = CATEGORY_MAP[categoryFileName] || categoryFileName;
                
                const filePath = path.join(DATA_DIR, file);
                const fileContent = await fs.readFile(filePath, 'utf-8');
                
                const data = JSON.parse(fileContent).map((item, index) => {
                    const totalVotes = (item.votes?.oui || 0) + (item.votes?.non || 0) + (item.votes?.abstention || 0);

                    return {
                        ...item,
                        id: item.id || `${categoryKey}-${index}`, 
                        category: categoryKey,
                        votes: item.votes || { oui: 0, non: 0, abstention: 0 },
                        totalVotes: totalVotes,
                        ric_type: item.ric_type || 'L√©gislatif', 
                        priority: item.priority || 'Faible',
                        totalScore: item.totalScore || 0 // Assurez-vous que le score existe
                    };
                });

                revendicationsData[categoryKey] = data;
            }
        }
        console.log(`‚úÖ Revendications th√©matiques charg√©es : ${Object.keys(revendicationsData).join(', ')}.`);
        
    } catch (error) {
        console.error("‚ùå Erreur de chargement des revendications. Assurez-vous que le r√©pertoire 'docs/data' existe et contient des fichiers JSON valides.", error);
    }
}

/**
 * Sauvegarde les revendications d'une cat√©gorie donn√©e sur le disque. (Inchang√©e)
 */
async function saveRevendications(categoryKey) {
    try {
        const categoryFileName = Object.keys(CATEGORY_MAP).find(key => CATEGORY_MAP[key] === categoryKey) || categoryKey;
        const filePath = path.join(DATA_DIR, `${categoryFileName}.json`);
        
        const dataToSave = revendicationsData[categoryKey].map(item => {
            const { totalVotes, totalScore, ...rest } = item; 
            return { ...rest, totalScore: totalScore };
        });

        await fs.writeFile(filePath, JSON.stringify(dataToSave, null, 2), 'utf-8');
        console.log(`üíæ Donn√©es de la cat√©gorie '${categoryKey}' sauvegard√©es.`);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la sauvegarde de la cat√©gorie '${categoryKey}':`, error);
    }
}

/**
 * NOUVEAU: Ajoute et sauvegarde une analyse g√©n√©r√©e au log.
 */
async function saveAnalysisLog(analysisData) {
    // Ajouter l'entr√©e horodat√©e au d√©but du tableau
    const logEntry = {
        timestamp: new Date().toISOString(),
        ...analysisData
    };
    analysisLog.unshift(logEntry); 

    try {
        await fs.writeFile(ANALYSIS_LOG_PATH, JSON.stringify(analysisLog, null, 2), 'utf-8');
        console.log(`üíæ Analyse pour ${analysisData.itemId} logu√©e.`);
    } catch (error) {
        console.error("‚ùå Erreur lors de la sauvegarde du log d'analyse:", error);
    }
}

/**
 * Cherche une revendication par ID √† travers toutes les cat√©gories. (Inchang√©e)
 */
function findRevendicationById(id) {
    for (const category in revendicationsData) {
        const item = revendicationsData[category].find(r => r.id === id);
        if (item) {
            return { item, category };
        }
    }
    return null;
}

/**
 * Fonction pour g√©rer la logique de nouvelle tentative (retry) avec backoff exponentiel. (Inchang√©e)
 */
async function retryApiCall(apiCall, maxRetries = 3) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await apiCall();
        } catch (error) {
            if (error.status === 429) {
                console.error("ERREUR QUOTA (429): Arr√™t des r√©essais Groq.");
                throw error;
            }

            if (i === maxRetries - 1) {
                throw error;
            }
            const delay = Math.pow(2, i) * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}


// Lancement initial du chargement des donn√©es
(async () => {
    await loadAllRevendications();
})();


// ----------------------------------------------------------------------
// ROUTE : Analyse Compl√®te + Visualisation (Remplace /api/detail)
// ----------------------------------------------------------------------
app.get('/api/full-analysis', async (req, res) => {
    // ... (Logique de l'IA inchang√©e) ...
    const topic = req.query.topic; 
    
    if (!topic) {
        return res.status(400).json({ error: "Le param√®tre 'topic' (revendication) est manquant." });
    }
    
    // --- 1. Pr√©paration des appels asynchrones ---
    const textAnalysisPromise = (async () => {
        const textPrompt = `
            Revendication : "${topic}"
            En tant qu'analyste politique et social, vous devez d√©tailler, contextualiser et d√©velopper la revendication ci-dessus.
            Pr√©sentez la comme une th√®se envisag√©e, expliquant le probl√®me sous-jacent, les enjeux actuels et les cons√©quences de son non-traitement.
            
            INSTRUCTIONS DE FORMATAGE CRUCIALE : La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'. Utilisez les balises <h3> pour les titres de section ('Contexte et Probl√©matique' et 'Justification de l'Urgence') et <strong> pour les mots-cl√©s importants. N'incluez aucun Markdown, seulement du HTML valide.
            
            Structurez votre r√©ponse avec les balises HTML demand√©es.
        `;

        try {
            const apiCall = async () => groq.chat.completions.create({
                messages: [
                    { role: "system", content: "Vous √™tes un analyste politique et social. Votre t√¢che est de d√©velopper la revendication utilisateur en une th√®se d√©taill√©e et contextualis√©e. La r√©ponse doit √™tre format√©e en HTML structur√©." },
                    { role: "user", content: textPrompt },
                ],
                model: GROQ_MODEL,
                temperature: 0.7, 
            });

            const chatCompletion = await retryApiCall(apiCall);
            return chatCompletion.choices[0]?.message?.content || "Analyse textuelle non g√©n√©r√©e.";

        } catch (error) {
            console.error("Erreur Groq lors de l'analyse textuelle:", error.message);
            return `<div class="error-message">Erreur: Le service d'analyse textuelle (Groq) a √©chou√©. ${error.message}</div>`;
        }
    })();


    const imageGenerationPromise = (async () => {
        if (!genAI) return 'disabled';
        
        let mediaUrl = 'not_generated';
        const MAX_RETRIES = 5; 
        
        for (let i = 0; i < MAX_RETRIES; i++) {
            try {
                const imagePrompt = `Cr√©e une image symbolique de haute qualit√©, style art politique minimaliste, repr√©sentant le concept cl√© de cette revendication citoyenne: "${topic}". Concentrez-vous sur l'impact social ou l'enjeu d√©mocratique.`;
                
                const result = await genAI.models.generateContent({
                    model: 'gemini-2.5-flash-image-preview',
                    contents: [{ role: "user", parts: [{ text: imagePrompt }] }],
                    config: {
                        responseModalities: ["IMAGE"]
                    }
                });
                
                const imagePart = result.candidates?.[0]?.content?.parts?.find(p => p.inlineData);
                
                if (imagePart && imagePart.inlineData?.data) {
                    mediaUrl = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;
                    break; // Succ√®s
                }

                console.warn(`Tentative d'image √©chou√©e ${i + 1}/${MAX_RETRIES}: R√©ponse vide ou incompl√®te.`);
                await new Promise(resolve => setTimeout(resolve, 500)); 
                
            } catch (imageError) { 
                if (imageError.status === 429) {
                     console.error("ERREUR QUOTA (429): Arr√™t de la g√©n√©ration d'images.");
                     return 'error'; 
                }

                console.error(`Tentative d'image √©chou√©e ${i + 1}/${MAX_RETRIES} (Gemini):`, imageError.message); 
                mediaUrl = 'error';
                if (i === MAX_RETRIES - 1) throw imageError;
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        return mediaUrl;

    })();


    // --- 2. Ex√©cution des promesses ---
    const [detail, mediaUrl] = await Promise.all([textAnalysisPromise, imageGenerationPromise]);

    // --- 3. Envoi de la r√©ponse combin√©e ---
    res.json({ 
        success: true,
        detail: detail,
        mediaUrl: mediaUrl === 'disabled' || mediaUrl === 'error' ? null : mediaUrl 
    });
});


// ----------------------------------------------------------------------
// NOUVELLE ROUTE : Enregistrer les Analyses IA pour l'Historique
// ----------------------------------------------------------------------
app.post('/api/log-analysis', async (req, res) => {
    const { itemId, revendication, detailHtml, solutionHtml, mediaUrl } = req.body;

    if (!itemId || !revendication || !detailHtml || !solutionHtml) {
        return res.status(400).json({ error: "Les donn√©es d'analyse (itemId, detail, solution) sont requises." });
    }

    try {
        await saveAnalysisLog({
            itemId,
            revendication,
            detailHtml,
            solutionHtml,
            mediaUrl: mediaUrl || 'N/A'
        });

        res.json({ success: true, message: "Analyse enregistr√©e dans le log." });
    } catch (error) {
        console.error("Erreur lors du log de l'analyse:", error);
        res.status(500).json({ error: "√âchec de l'enregistrement de l'analyse." });
    }
});


// ----------------------------------------------------------------------
// ROUTE : OPTIMISATION ET SOLUTIONS ENVISAG√âES (/api/optimise) (inchang√©e)
// ----------------------------------------------------------------------
app.get('/api/optimise', async (req, res) => {
    const detailText = req.query.detail; 
    
    if (!detailText) {
        return res.status(400).json({ error: "Le param√®tre 'detail' (d√©tail de la revendication) est manquant." });
    }

    const prompt = `
        En vous basant uniquement sur l'analyse d√©taill√©e fournie ci-dessous, agissez en tant qu'expert l√©gislatif et r√©formateur.
        Proposez une solution optimale et concr√®te pour r√©soudre le probl√®me soulev√©.
        Votre solution doit prendre la forme d'un projet de loi, d'une r√©forme constitutionnelle, d'une abrogation, d'une destitution, d'une initiative ou d'une r√©forme cibl√©e.
        D√©taillez le type d'action requis et les √©tapes cl√©s.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE :
        1. **La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'.**
        2. Utilisez les balises **<h3>** pour les titres de section ('Proposition de Solution', 'Type d'Acte' et '√âtapes de Mise en ≈íuvre') avec la classe 'ia-title'.
        3. Utilisez des **<ul> ou <ol>** pour structurer l'information.
        4. Mettez les **mots-cl√©s importants** en **gras** (utilisation de <strong>).
        5. N'incluez aucun code Markdown, seulement du HTML valide.

        Structurez votre r√©ponse avec les balises HTML demand√©es.

        Analyse D√©taill√©e √† laquelle vous devez r√©pondre : 
        ---
        ${detailText}
        ---
    `;

    try {
        const apiCall = async () => groq.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "Vous √™tes un expert l√©gislatif et un r√©formateur, sp√©cialis√© dans la conception de solutions concr√®tes pour les probl√®mes sociaux et politiques. La r√©ponse doit √™tre format√©e en HTML structur√© selon les instructions fournies."
                },
                {
                    role: "user",
                    content: prompt, 
                }
            ],
            model: GROQ_MODEL,
            temperature: 0.5,
        });

        const chatCompletion = await retryApiCall(apiCall);

        res.json({
            solution: chatCompletion.choices[0]?.message?.content || "Pas de solution g√©n√©r√©e."
        });

    } catch (error) {
        console.error("Erreur fatale lors de l'appel √† /api/optimise:", error.message);
        res.status(500).json({ 
            error: `Erreur lors de la g√©n√©ration des solutions par le mod√®le. V√©rifiez la cl√© API et les logs. D√©tails: ${error.message}` 
        });
    }
});


// ----------------------------------------------------------------------
// Les autres routes /api/stats, /api/vote, /api/vote-score sont inchang√©es.
// ----------------------------------------------------------------------

app.get('/api/stats', async (req, res) => {
    await loadAllRevendications(); 

    const stats = {
        totalRevendications: 0,
        byCategory: {},
        byPriority: { 'Faible': 0, 'Moyen': 0, '√âlev√©': 0 },
        totalVotes: 0
    };

    for (const category in revendicationsData) {
        const count = revendicationsData[category].length;
        stats.totalRevendications += count;
        stats.byCategory[category] = count;

        revendicationsData[category].forEach(item => {
            stats.byPriority[item.priority] = (stats.byPriority[item.priority] || 0) + 1;
            // totalVotes est maintenant le totalScore (points) pour la priorisation
            stats.totalVotes += (item.totalScore || 0); 
        });
    }

    res.json(stats);
});


app.post('/api/vote', async (req, res) => {
    const { id, voteType } = req.body;
    
    if (!id || !voteType) {
        return res.status(400).json({ error: "Les param√®tres 'id' et 'voteType' sont requis." });
    }
    
    const result = findRevendicationById(id);

    if (!result) {
        return res.status(404).json({ error: `Revendication avec l'ID '${id}' non trouv√©e.` });
    }

    const { item, category } = result;

    if (item.votes[voteType] !== undefined) {
        item.votes[voteType]++;
        item.totalVotes = (item.votes.oui || 0) + (item.votes.non || 0) + (item.votes.abstention || 0);

        await saveRevendications(category); 
        res.json({ success: true, new_votes: item.votes, total_votes: item.totalVotes });
    } else {
        res.status(400).json({ error: "Type de vote invalide." });
    }
});


app.post('/api/vote-score', async (req, res) => {
    const { id, scoreChange } = req.body; 
    
    if (!id || typeof scoreChange !== 'number' || scoreChange === 0) {
        return res.status(400).json({ error: "Les param√®tres 'id' et 'scoreChange' (diff√©rence de points) sont requis." });
    }
    
    const result = findRevendicationById(id);

    if (!result) {
        return res.status(404).json({ error: `Revendication avec l'ID '${id}' non trouv√©e.` });
    }

    const { item, category } = result;
    
    item.totalScore = (item.totalScore || 0) + scoreChange;
    
    try {
        await saveRevendications(category); 
        
        res.json({ 
            success: true, 
            new_item_score: item.totalScore 
        });
        
    } catch (error) {
        console.error("Erreur lors de l'enregistrement du score:", error.message);
        res.status(500).json({ error: "Erreur serveur lors de la sauvegarde du score." });
    }
});


// Route par d√©faut (g√®re l'acc√®s direct √† l'index.html dans 'docs')
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'docs', 'index.html'));
});


// --- D√©marrage du Serveur ---
app.listen(PORT, () => {
    console.log(`‚úÖ Serveur web de d√©veloppement d√©marr√©.`);
    console.log(`üåê Interface web accessible sur: http://localhost:${PORT}`);
    console.log(`üìö Documentation de l'API : http://localhost:${PORT}/api-docs`);
    console.log(`üß† Mod√®le d'optimisation (LPU): ${GROQ_MODEL}`);
    if (!process.env.GROQ_API_KEY) {
        console.warn("‚ö†Ô∏è AVERTISSEMENT: La variable d'environnement GROQ_API_KEY n'est pas d√©finie. Les appels Groq √©choueront.");
    }
});

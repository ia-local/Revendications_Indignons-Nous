// server.js

const express = require('express');
const path = require('path');
const Groq = require('groq-sdk');
const fs = require('fs/promises');
const swaggerUi = require('swagger-ui-express');
const YAML = require('yamljs'); // Librairie pour charger le fichier YAML

// --- Configuration du Serveur ---
const app = express();
const PORT = 3144;
// Utiliser Express JSON pour les requ√™tes POST (pour /api/vote)
app.use(express.json());

// --- Configuration Groq et IA ---
const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY 
});
const GROQ_MODEL = "gemma2-9b-it"; 

// ------------------------------------------------
// 1. CONFIGURATION SWAGGER UI
// ------------------------------------------------
const swaggerDocumentPath = path.join(__dirname, 'api-docs', 'swagger.yaml');
let swaggerDocument = {};

try {
    swaggerDocument = YAML.load(swaggerDocumentPath);
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
    console.log("‚úÖ Documentation Swagger disponible sur /api-docs.");
} catch (error) {
    console.error('‚ùå Erreur lors du chargement de la documentation Swagger (v√©rifiez le chemin et la syntaxe YAML):', error.message);
}


// Servir les fichiers statiques (Front-end : index.html, script.js, etc.) depuis le r√©pertoire 'docs'
app.use(express.static(path.join(__dirname, 'docs')));


// ------------------------------------------------
// 2. GESTION DES DONN√âES ET REVENDICATIONS
// ------------------------------------------------

// Contient toutes les revendications, structur√©es par cat√©gorie (ex: { democratie: [...], ecologie: [...] })
let revendicationsData = {};
const DATA_DIR = path.join(__dirname, 'docs', 'data'); 

/**
 * Charge tous les fichiers JSON du r√©pertoire DATA_DIR.
 * Chaque fichier JSON devient une cat√©gorie de revendications.
 */
async function loadAllRevendications() {
    try {
        const files = await fs.readdir(DATA_DIR);
        revendicationsData = {}; // R√©initialiser avant le chargement
        
        for (const file of files) {
            if (file.endsWith('.json')) {
                const category = path.parse(file).name; // 'democratie'
                const filePath = path.join(DATA_DIR, file);
                const fileContent = await fs.readFile(filePath, 'utf-8');
                
                // Assurez-vous que chaque revendication a un ID unique pour le suivi
                const data = JSON.parse(fileContent).map((item, index) => ({
                    ...item,
                    id: item.id || `${category}-${index}`, // Assure un ID unique
                    category: category,
                    votes: item.votes || { oui: 0, non: 0, abstention: 0 },
                    ric_type: item.ric_type || 'L√©gislatif', // Type de RIC par d√©faut
                    priority: item.priority || 'Faible' // Priorit√© par d√©faut
                }));

                revendicationsData[category] = data;
            }
        }
        console.log(`‚úÖ Revendications th√©matiques charg√©es : ${Object.keys(revendicationsData).join(', ')}.`);
        
    } catch (error) {
        console.error("‚ùå Erreur de chargement des revendications. Assurez-vous que le r√©pertoire 'docs/data' existe et contient des fichiers JSON valides.", error);
    }
}

/**
 * Sauvegarde les revendications d'une cat√©gorie donn√©e sur le disque.
 * @param {string} category Le nom de la cat√©gorie (ex: 'democratie').
 */
async function saveRevendications(category) {
    try {
        const filePath = path.join(DATA_DIR, `${category}.json`);
        const dataToSave = JSON.stringify(revendicationsData[category], null, 2);
        await fs.writeFile(filePath, dataToSave, 'utf-8');
        console.log(`üíæ Donn√©es de la cat√©gorie '${category}' sauvegard√©es.`);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la sauvegarde de la cat√©gorie '${category}':`, error);
    }
}

/**
 * Cherche une revendication par ID √† travers toutes les cat√©gories.
 * @param {string} id L'ID unique de la revendication (ex: 'democratie-3').
 * @returns {object | null} La revendication trouv√©e et sa cat√©gorie.
 */
function findRevendicationById(id) {
    for (const category in revendicationsData) {
        const item = revendicationsData[category].find(r => r.id === id);
        if (item) {
            return { item, category };
        }
    }
    return null;
}

// Lancement initial du chargement des donn√©es
(async () => {
    await loadAllRevendications();
})();


/**
 * Fonction pour g√©rer la logique de nouvelle tentative (retry) avec backoff exponentiel.
 * [La fonction retryApiCall est inchang√©e]
 */
async function retryApiCall(apiCall, maxRetries = 3) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await apiCall();
        } catch (error) {
            if (i === maxRetries - 1) {
                throw error;
            }
            const delay = Math.pow(2, i) * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}


// ----------------------------------------------------------------------
// NOUVELLE ROUTE : Retourne toutes les revendications par cat√©gorie
// ----------------------------------------------------------------------
app.get('/api/data', async (req, res) => {
    // Recharger les donn√©es pour s'assurer d'avoir les votes les plus r√©cents
    await loadAllRevendications(); 
    res.json(revendicationsData);
});

// ----------------------------------------------------------------------
// NOUVELLE ROUTE : Retourne les statistiques pour le Dashboard
// ----------------------------------------------------------------------
app.get('/api/stats', async (req, res) => {
    await loadAllRevendications(); 

    const stats = {
        totalRevendications: 0,
        byCategory: {},
        byPriority: { 'Faible': 0, 'Moyen': 0, '√âlev√©': 0 },
        totalVotes: 0
    };

    for (const category in revendicationsData) {
        const count = revendicationsData[category].length;
        stats.totalRevendications += count;
        stats.byCategory[category] = count;

        revendicationsData[category].forEach(item => {
            stats.byPriority[item.priority] = (stats.byPriority[item.priority] || 0) + 1;
            stats.totalVotes += (item.votes.oui || 0) + (item.votes.non || 0) + (item.votes.abstention || 0);
        });
    }

    res.json(stats);
});


// ----------------------------------------------------------------------
// NOUVELLE ROUTE : Enregistrer un vote
// ----------------------------------------------------------------------
app.post('/api/vote', async (req, res) => {
    const { id, voteType } = req.body; // voteType doit √™tre 'oui', 'non', ou 'abstention'
    
    if (!id || !voteType) {
        return res.status(400).json({ error: "Les param√®tres 'id' et 'voteType' sont requis." });
    }
    
    const result = findRevendicationById(id);

    if (!result) {
        return res.status(404).json({ error: `Revendication avec l'ID '${id}' non trouv√©e.` });
    }

    const { item, category } = result;

    // Mise √† jour du vote
    if (item.votes[voteType] !== undefined) {
        item.votes[voteType]++;
        await saveRevendications(category); // Sauvegarder la modification sur le disque
        res.json({ success: true, new_votes: item.votes });
    } else {
        res.status(400).json({ error: "Type de vote invalide." });
    }
});


// ----------------------------------------------------------------------
// ROUTE 1 : PR√âSENTATION D√âTAILL√âE DE LA REVENDICATION (/api/detail)
// NOTE : Le front-end devra maintenant envoyer l'ID et la cat√©gorie
// ----------------------------------------------------------------------
app.get('/api/detail', async (req, res) => {
    const revendicationText = req.query.text; // Utilise toujours le texte car l'IA a besoin du contenu pr√©cis
    
    if (!revendicationText) {
        return res.status(400).json({ error: "Le param√®tre 'text' (revendication) est manquant." });
    }
    
    const prompt = `
        Revendication : "${revendicationText}"
        
        En tant qu'analyste politique et social, vous devez d√©tailler, contextualiser et d√©velopper la revendication ci-dessus.
        Pr√©sentez la comme une th√®se envisag√©e, expliquant le probl√®me sous-jacent, les enjeux actuels et les cons√©quences de son non-traitement.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE : 
        1. **La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'.**
        2. Utilisez les balises **<h3>** pour les titres de section ('Contexte et Probl√©matique' et 'Justification de l'Urgence') avec la classe 'ia-title'.
        3. Utilisez des **<ul> ou <ol>** pour structurer l'information.
        4. Mettez les **mots-cl√©s importants** en **gras** (utilisation de <strong>).
        5. N'incluez aucun code Markdown, seulement du HTML valide.

        Structurez votre r√©ponse avec les balises HTML demand√©es.
    `;

    try {
        const apiCall = async () => groq.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "Vous √™tes un analyste politique et social. Votre t√¢che est de d√©velopper la revendication utilisateur en une th√®se d√©taill√©e et contextualis√©e, en vous concentrant sur le probl√®me et l'urgence, sans proposer de solution √† ce stade. La r√©ponse doit √™tre format√©e en HTML structur√© selon les instructions fournies."
                },
                {
                    role: "user",
                    content: prompt, 
                }
            ],
            model: GROQ_MODEL,
            temperature: 0.7, 
        });

        const chatCompletion = await retryApiCall(apiCall);

        res.json({
            detail: chatCompletion.choices[0]?.message?.content || "Pas de d√©tail g√©n√©r√©."
        });

    } catch (error) {
        console.error("Erreur fatale lors de l'appel √† /api/detail:", error.message);
        res.status(500).json({ 
            error: `Erreur lors de la g√©n√©ration des d√©tails par le mod√®le. V√©rifiez la cl√© API et les logs. D√©tails: ${error.message}` 
        });
    }
});


// ----------------------------------------------------------------------
// ROUTE 2 : OPTIMISATION ET SOLUTIONS ENVISAG√âES (/api/optimise)
// ----------------------------------------------------------------------
app.get('/api/optimise', async (req, res) => {
    const detailText = req.query.detail; 
    
    if (!detailText) {
        return res.status(400).json({ error: "Le param√®tre 'detail' (d√©tail de la revendication) est manquant." });
    }

    const prompt = `
        En vous basant uniquement sur l'analyse d√©taill√©e fournie ci-dessous, agissez en tant qu'expert l√©gislatif et r√©formateur.
        Proposez une solution optimale et concr√®te pour r√©soudre le probl√®me soulev√©.
        Votre solution doit prendre la forme d'un projet de loi, d'une r√©forme constitutionnelle, d'une abrogation, d'une destitution, d'une initiative ou d'une r√©forme cibl√©e.
        D√©taillez le type d'action requis et les √©tapes cl√©s.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE :
        1. **La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'.**
        2. Utilisez les balises **<h3>** pour les titres de section ('Proposition de Solution', 'Type d'Acte' et '√âtapes de Mise en ≈íuvre') avec la classe 'ia-title'.
        3. Utilisez des **<ul> ou <ol>** pour structurer l'information.
        4. Mettez les **mots-cl√©s importants** en **gras** (utilisation de <strong>).
        5. N'incluez aucun code Markdown, seulement du HTML valide.

        Structurez votre r√©ponse avec les balises HTML demand√©es.

        Analyse D√©taill√©e √† laquelle vous devez r√©pondre : 
        ---
        ${detailText}
        ---
    `;

    try {
        const apiCall = async () => groq.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "Vous √™tes un expert l√©gislatif et un r√©formateur, sp√©cialis√© dans la conception de solutions concr√®tes pour les probl√®mes sociaux et politiques. La r√©ponse doit √™tre format√©e en HTML structur√© selon les instructions fournies."
                },
                {
                    role: "user",
                    content: prompt, 
                }
            ],
            model: GROQ_MODEL,
            temperature: 0.5,
        });

        const chatCompletion = await retryApiCall(apiCall);

        res.json({
            solution: chatCompletion.choices[0]?.message?.content || "Pas de solution g√©n√©r√©e."
        });

    } catch (error) {
        console.error("Erreur fatale lors de l'appel √† /api/optimise:", error.message);
        res.status(500).json({ 
            error: `Erreur lors de la g√©n√©ration des solutions par le mod√®le. V√©rifiez la cl√© API et les logs. D√©tails: ${error.message}` 
        });
    }
});


// Route par d√©faut (g√®re l'acc√®s direct √† l'index.html dans 'docs')
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'docs', 'index.html'));
});


// --- D√©marrage du Serveur ---
app.listen(PORT, () => {
    console.log(`‚úÖ Serveur web de d√©veloppement d√©marr√©.`);
    console.log(`üåê Interface web accessible sur: http://localhost:${PORT}`);
    console.log(`üìö Documentation de l'API : http://localhost:${PORT}/api-docs`);
    console.log(`üß† Mod√®le d'optimisation (LPU): ${GROQ_MODEL}`);
    if (!process.env.GROQ_API_KEY) {
        console.warn("‚ö†Ô∏è AVERTISSEMENT: La variable d'environnement GROQ_API_KEY n'est pas d√©finie. Les appels API √©choueront.");
    }
});

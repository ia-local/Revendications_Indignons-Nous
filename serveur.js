// server.js

const express = require('express');
const path = require('path');
const Groq = require('groq-sdk');
const fs = require('fs/promises');

// --- Configuration du Serveur ---
const app = express();
const PORT = 3144;

// --- Configuration Groq et IA ---
const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY 
});
const GROQ_MODEL = "gemma2-9b-it"; 

// Servir les fichiers statiques
app.use(express.static(path.join(__dirname, 'docs')));


// --- Chargement Statique des Revendications ---
let revendicationsData = {};
(async () => {
    try {
        const dataPath = path.join(__dirname, 'docs', 'revendications.json');
        const fileContent = await fs.readFile(dataPath, 'utf-8');
        revendicationsData = JSON.parse(fileContent);
        console.log("‚úÖ Revendications JSON charg√©es.");
    } catch (error) {
        console.error("‚ùå Erreur de chargement de revendications.json. Veuillez v√©rifier le fichier:", error);
    }
})();


/**
 * Fonction pour g√©rer la logique de nouvelle tentative (retry) avec backoff exponentiel.
 * @param {Function} apiCall La fonction asynchrone √† ex√©cuter (l'appel Groq).
 * @param {number} maxRetries Nombre maximal de tentatives.
 * @returns Le r√©sultat de l'appel API.
 */
async function retryApiCall(apiCall, maxRetries = 3) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await apiCall();
        } catch (error) {
            if (i === maxRetries - 1) {
                throw error;
            }
            const delay = Math.pow(2, i) * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}


// ----------------------------------------------------------------------
// ROUTE 1 : PR√âSENTATION D√âTAILL√âE DE LA REVENDICATION (/api/detail)
// ----------------------------------------------------------------------
app.get('/api/detail', async (req, res) => {
    const revendicationText = req.query.text;
    
    if (!revendicationText) {
        return res.status(400).json({ error: "Le param√®tre 'text' (revendication) est manquant." });
    }
    
    const prompt = `
        Revendication : "${revendicationText}"
        
        En tant qu'analyste politique et social, vous devez d√©tailler, contextualiser et d√©velopper la revendication ci-dessus.
        Pr√©sentez la comme une th√®se envisag√©e, expliquant le probl√®me sous-jacent, les enjeux actuels et les cons√©quences de son non-traitement.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE : 
        1. **La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'.**
        2. Utilisez les balises **<h3>** pour les titres de section ('Contexte et Probl√©matique' et 'Justification de l'Urgence') avec la classe 'ia-title'.
        3. Utilisez des **<ul> ou <ol>** pour structurer l'information.
        4. Mettez les **mots-cl√©s importants** en **gras** (utilisation de <strong>).
        5. N'incluez aucun code Markdown, seulement du HTML valide.

        Structurez votre r√©ponse avec les balises HTML demand√©es.
    `;

    try {
        const apiCall = async () => groq.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "Vous √™tes un analyste politique et social. Votre t√¢che est de d√©velopper la revendication utilisateur en une th√®se d√©taill√©e et contextualis√©e, en vous concentrant sur le probl√®me et l'urgence, sans proposer de solution √† ce stade. La r√©ponse doit √™tre format√©e en HTML structur√© selon les instructions fournies."
                },
                {
                    role: "user",
                    content: prompt, 
                }
            ],
            model: GROQ_MODEL,
            temperature: 0.7, 
        });

        const chatCompletion = await retryApiCall(apiCall);

        res.json({
            detail: chatCompletion.choices[0]?.message?.content || "Pas de d√©tail g√©n√©r√©."
        });

    } catch (error) {
        console.error("Erreur fatale lors de l'appel √† /api/detail:", error.message);
        res.status(500).json({ 
            error: `Erreur lors de la g√©n√©ration des d√©tails par le mod√®le. V√©rifiez la cl√© API et les logs. D√©tails: ${error.message}` 
        });
    }
});


// ----------------------------------------------------------------------
// ROUTE 2 : OPTIMISATION ET SOLUTIONS ENVISAG√âES (/api/optimise)
// ----------------------------------------------------------------------
app.get('/api/optimise', async (req, res) => {
    const detailText = req.query.detail; 
    
    if (!detailText) {
        return res.status(400).json({ error: "Le param√®tre 'detail' (d√©tail de la revendication) est manquant." });
    }

    const prompt = `
        En vous basant uniquement sur l'analyse d√©taill√©e fournie ci-dessous, agissez en tant qu'expert l√©gislatif et r√©formateur.
        Proposez une solution optimale et concr√®te pour r√©soudre le probl√®me soulev√©.
        Votre solution doit prendre la forme d'un projet de loi, d'une r√©forme constitutionnelle, d'une abrogation, d'une destitution, d'une initiative ou d'une r√©forme cibl√©e.
        D√©taillez le type d'action requis et les √©tapes cl√©s.
        
        INSTRUCTIONS DE FORMATAGE CRUCIALE :
        1. **La r√©ponse doit √™tre envelopp√©e dans une seule balise <div> avec la classe 'ia-output'.**
        2. Utilisez les balises **<h3>** pour les titres de section ('Proposition de Solution', 'Type d'Acte' et '√âtapes de Mise en ≈íuvre') avec la classe 'ia-title'.
        3. Utilisez des **<ul> ou <ol>** pour structurer l'information.
        4. Mettez les **mots-cl√©s importants** en **gras** (utilisation de <strong>).
        5. N'incluez aucun code Markdown, seulement du HTML valide.

        Structurez votre r√©ponse avec les balises HTML demand√©es.

        Analyse D√©taill√©e √† laquelle vous devez r√©pondre : 
        ---
        ${detailText}
        ---
    `;

    try {
        const apiCall = async () => groq.chat.completions.create({
            messages: [
                {
                    role: "system",
                    content: "Vous √™tes un expert l√©gislatif et un r√©formateur, sp√©cialis√© dans la conception de solutions concr√®tes pour les probl√®mes sociaux et politiques. La r√©ponse doit √™tre format√©e en HTML structur√© selon les instructions fournies."
                },
                {
                    role: "user",
                    content: prompt, 
                }
            ],
            model: GROQ_MODEL,
            temperature: 0.5,
        });

        const chatCompletion = await retryApiCall(apiCall);

        res.json({
            solution: chatCompletion.choices[0]?.message?.content || "Pas de solution g√©n√©r√©e."
        });

    } catch (error) {
        console.error("Erreur fatale lors de l'appel √† /api/optimise:", error.message);
        res.status(500).json({ 
            error: `Erreur lors de la g√©n√©ration des solutions par le mod√®le. V√©rifiez la cl√© API et les logs. D√©tails: ${error.message}` 
        });
    }
});


// Route par d√©faut (g√®re l'acc√®s direct √† l'index.html)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'docs', 'index.html'));
});


// --- D√©marrage du Serveur ---
app.listen(PORT, () => {
    console.log(`‚úÖ Serveur web de d√©veloppement d√©marr√©.`);
    console.log(`üåê Interface web accessible sur: http://localhost:${PORT}`);
    console.log(`üß† Mod√®le d'optimisation (LPU): ${GROQ_MODEL}`);
    if (!process.env.GROQ_API_KEY) {
        console.warn("‚ö†Ô∏è AVERTISSEMENT: La variable d'environnement GROQ_API_KEY n'est pas d√©finie. Les appels API √©choueront.");
    }
});
